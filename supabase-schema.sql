-- ============================== -- Core Tables -- ============================== -- Rooms table CREATE TABLE IF NOT EXISTS rooms ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), name TEXT NOT NULL, type TEXT NOT NULL, description TEXT, short_description TEXT, amenities JSONB DEFAULT '[]'::jsonb, images TEXT[] DEFAULT ARRAY[]::TEXT[], image TEXT, price INTEGER DEFAULT 0, created_at TIMESTAMPTZ DEFAULT NOW(), updated_at TIMESTAMPTZ DEFAULT NOW() ); -- Events table CREATE TABLE IF NOT EXISTS events ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), title TEXT NOT NULL, date DATE NOT NULL, description TEXT, image TEXT, category TEXT, created_at TIMESTAMPTZ DEFAULT NOW(), updated_at TIMESTAMPTZ DEFAULT NOW() ); -- Wines table CREATE TABLE IF NOT EXISTS wines ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), name TEXT NOT NULL, image TEXT, tasting_notes TEXT, vintage TEXT, region TEXT, created_at TIMESTAMPTZ DEFAULT NOW(), updated_at TIMESTAMPTZ DEFAULT NOW() ); -- Bookings table CREATE TABLE IF NOT EXISTS bookings ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), name TEXT NOT NULL, email TEXT NOT NULL, phone TEXT, room_id UUID REFERENCES rooms(id), check_in DATE NOT NULL, check_out DATE NOT NULL, guests INTEGER DEFAULT 2, message TEXT, status TEXT DEFAULT 'pending', created_at TIMESTAMPTZ DEFAULT NOW() ); -- Restaurant reservations table CREATE TABLE IF NOT EXISTS restaurant_reservations ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), name TEXT NOT NULL, email TEXT NOT NULL, date DATE NOT NULL, time TIME NOT NULL, guests INTEGER DEFAULT 2, created_at TIMESTAMPTZ DEFAULT NOW() ); -- Contact messages table CREATE TABLE IF NOT EXISTS contacts ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), name TEXT NOT NULL, email TEXT NOT NULL, message TEXT NOT NULL, created_at TIMESTAMPTZ DEFAULT NOW() ); -- Wine inquiries table CREATE TABLE IF NOT EXISTS wine_inquiries ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), wine_id UUID REFERENCES wines(id), name TEXT NOT NULL, email TEXT NOT NULL, message TEXT, created_at TIMESTAMPTZ DEFAULT NOW() ); -- ============================== -- Enable Row Level Security -- ============================== ALTER TABLE rooms ENABLE ROW LEVEL SECURITY; ALTER TABLE events ENABLE ROW LEVEL SECURITY; ALTER TABLE wines ENABLE ROW LEVEL SECURITY; ALTER TABLE bookings ENABLE ROW LEVEL SECURITY; ALTER TABLE restaurant_reservations ENABLE ROW LEVEL SECURITY; ALTER TABLE contacts ENABLE ROW LEVEL SECURITY; ALTER TABLE wine_inquiries ENABLE ROW LEVEL SECURITY; -- ============================== -- Public Policies -- ============================== -- Drop old policies if they exist (idempotent) DROP POLICY IF EXISTS "Public can read rooms" ON rooms; DROP POLICY IF EXISTS "Public can read events" ON events; DROP POLICY IF EXISTS "Public can read wines" ON wines; DROP POLICY IF EXISTS "Public can insert bookings" ON bookings; DROP POLICY IF EXISTS "Public can insert reservations" ON restaurant_reservations; DROP POLICY IF EXISTS "Public can insert contacts" ON contacts; DROP POLICY IF EXISTS "Public can insert wine inquiries" ON wine_inquiries; -- Recreate policies CREATE POLICY "Public can read rooms" ON rooms FOR SELECT USING (true); CREATE POLICY "Public can read events" ON events FOR SELECT USING (true); CREATE POLICY "Public can read wines" ON wines FOR SELECT USING (true); CREATE POLICY "Public can insert bookings" ON bookings FOR INSERT WITH CHECK (true); CREATE POLICY "Public can insert reservations" ON restaurant_reservations FOR INSERT WITH CHECK (true); CREATE POLICY "Public can insert contacts" ON contacts FOR INSERT WITH CHECK (true); CREATE POLICY "Public can insert wine inquiries" ON wine_inquiries FOR INSERT WITH CHECK (true); -- ============================== -- Admin Policies -- ============================== -- Drop old admin policies if they exist DROP POLICY IF EXISTS "Admins can manage rooms" ON rooms; DROP POLICY IF EXISTS "Admins can manage events" ON events; DROP POLICY IF EXISTS "Admins can manage wines" ON wines; DROP POLICY IF EXISTS "Admins can view bookings" ON bookings; DROP POLICY IF EXISTS "Admins can view reservations" ON restaurant_reservations; DROP POLICY IF EXISTS "Admins can view contacts" ON contacts; DROP POLICY IF EXISTS "Admins can view inquiries" ON wine_inquiries; -- Recreate admin policies CREATE POLICY "Admins can manage rooms" ON rooms FOR ALL USING (auth.jwt()->>'role' = 'admin'); CREATE POLICY "Admins can manage events" ON events FOR ALL USING (auth.jwt()->>'role' = 'admin'); CREATE POLICY "Admins can manage wines" ON wines FOR ALL USING (auth.jwt()->>'role' = 'admin'); CREATE POLICY "Admins can view bookings" ON bookings FOR SELECT USING (auth.jwt()->>'role' = 'admin'); CREATE POLICY "Admins can view reservations" ON restaurant_reservations FOR SELECT USING (auth.jwt()->>'role' = 'admin'); CREATE POLICY "Admins can view contacts" ON contacts FOR SELECT USING (auth.jwt()->>'role' = 'admin'); CREATE POLICY "Admins can view inquiries" ON wine_inquiries FOR SELECT USING (auth.jwt()->>'role' = 'admin'); -- ============================== -- Storage Setup (site-images) -- ============================== -- Create bucket for site images (idempotent) INSERT INTO storage.buckets (id, name, public) VALUES ('site-images', 'site-images', true) ON CONFLICT (id) DO NOTHING; -- Drop old storage policies if they exist DROP POLICY IF EXISTS "Public can view site images" ON storage.objects; DROP POLICY IF EXISTS "Admins can upload site images" ON storage.objects; DROP POLICY IF EXISTS "Admins can update site images" ON storage.objects; DROP POLICY IF EXISTS "Admins can delete site images" ON storage.objects; -- Public can view images CREATE POLICY "Public can view site images" ON storage.objects FOR SELECT USING (bucket_id = 'site-images'); -- Admins can upload images CREATE POLICY "Admins can upload site images" ON storage.objects FOR INSERT TO authenticated WITH CHECK (bucket_id = 'site-images' AND auth.jwt()->>'role' = 'admin'); -- Admins can update images CREATE POLICY "Admins can update site images" ON storage.objects FOR UPDATE TO authenticated USING (bucket_id = 'site-images' AND auth.jwt()->>'role' = 'admin') WITH CHECK (bucket_id = 'site-images'); -- Admins can delete images CREATE POLICY "Admins can delete site images" ON storage.objects FOR DELETE TO authenticated USING (bucket_id = 'site-images' AND auth.jwt()->>'role' = 'admin'); SELECT * FROM storage.buckets WHERE id = 'site-images'; -- Drop any old policies DROP POLICY IF EXISTS "Public can view site images" ON storage.objects; DROP POLICY IF EXISTS "Admins can upload site images" ON storage.objects; DROP POLICY IF EXISTS "Admins can update site images" ON storage.objects; DROP POLICY IF EXISTS "Admins can delete site images" ON storage.objects; -- Public read CREATE POLICY "Public can view site images" ON storage.objects FOR SELECT USING (bucket_id = 'site-images'); -- Admins upload CREATE POLICY "Admins can upload site images" ON storage.objects FOR INSERT TO authenticated WITH CHECK (bucket_id = 'site-images' AND auth.jwt()->>'role' = 'admin'); -- Admins update CREATE POLICY "Admins can update site images" ON storage.objects FOR UPDATE TO authenticated USING (bucket_id = 'site-images' AND auth.jwt()->>'role' = 'admin') WITH CHECK (bucket_id = 'site-images'); -- Admins delete CREATE POLICY "Admins can delete site images" ON storage.objects FOR DELETE TO authenticated USING (bucket_id = 'site-images' AND auth.jwt()->>'rol